// Generated by CoffeeScript 1.6.3
var Ellipsoid;

Ellipsoid = (function() {
  function Ellipsoid(center, radius_x, radius_y, radius_z, reflectionProperties) {
    this.center = center;
    this.radius_x = radius_x;
    this.radius_y = radius_y;
    this.radius_z = radius_z;
    this.reflectionProperties = reflectionProperties;
    this.radius_x_2 = Math.square(this.radius_x);
    this.radius_y_2 = Math.square(this.radius_y);
    this.radius_z_2 = Math.square(this.radius_z);
  }

  Ellipsoid.prototype.norm = function(intersectionPoint) {
    var n, t;
    n = intersectionPoint.subtract(this.center);
    t = $M([[2 / this.radius_x_2, 0, 0], [0, 2 / this.radius_y_2, 0], [0, 0, 2 / this.radius_z_2]]);
    n = t.multiply(n);
    return n.toUnitVector();
  };

  Ellipsoid.prototype.intersects = function(ray) {
    var a, b, c, dir, oc, root, t1, t2, under_root;
    oc = ray.line.anchor.subtract(this.center);
    dir = ray.line.direction.toUnitVector();
    a = ((dir.e(1) * dir.e(1)) / this.radius_x_2) + ((dir.e(2) * dir.e(2)) / this.radius_y_2) + ((dir.e(3) * dir.e(3)) / this.radius_z_2);
    b = ((2 * oc.e(1) * dir.e(1)) / this.radius_x_2) + ((2 * oc.e(2) * dir.e(2)) / this.radius_y_2) + ((2 * oc.e(3) * dir.e(3)) / this.radius_z_2);
    c = ((oc.e(1) * oc.e(1)) / this.radius_x_2) + ((oc.e(2) * oc.e(2)) / this.radius_y_2) + ((oc.e(3) * oc.e(3)) / this.radius_z_2) - 1;
    under_root = (b * b) - (4 * a * c);
    if (under_root < 0 || a === 0 || b === 0) {
      return null;
    }
    root = Math.sqrt(under_root);
    t1 = (-b + root) / (2 * a);
    t2 = (-b - root) / (2 * a);
    if (t1 < RayConfig.intersectionDelta) {
      return t2;
    }
    if (t2 < RayConfig.intersectionDelta) {
      return t1;
    }
    return Math.min(t1, t2);
  };

  Ellipsoid.prototype.intersection = function(ray) {
    var i, intersectionPoint, normal;
    i = this.intersects(ray);
    if (!i) {
      return false;
    }
    intersectionPoint = ray.line.anchor.add(ray.line.direction.multiply(i));
    normal = this.norm(intersectionPoint);
    return [i, intersectionPoint, normal];
  };

  return Ellipsoid;

})();

/*
//@ sourceMappingURL=Ellipsoid.map
*/
