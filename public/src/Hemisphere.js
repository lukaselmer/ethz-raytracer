// Generated by CoffeeScript 1.6.3
var Hemisphere;

Hemisphere = (function() {
  function Hemisphere(sphere, plane) {
    this.sphere = sphere;
    this.plane = plane;
  }

  Hemisphere.prototype.intersection = function(ray) {
    var planeIntersection, sphereIntersection;
    sphereIntersection = this.sphere.intersection(ray);
    planeIntersection = this.plane.intersection(ray);
    if (sphereIntersection === null || planeIntersection === null) {
      return null;
    }
    if (sphereIntersection.distance < planeIntersection.distance && sphereIntersection.distance2 < planeIntersection.distance) {
      return null;
    }
    if (sphereIntersection.distance > planeIntersection.distance && sphereIntersection.distance2 > planeIntersection.distance) {
      return sphereIntersection;
    }
    if (sphereIntersection.distance < planeIntersection.distance && sphereIntersection.distance2 > planeIntersection.distance) {
      return planeIntersection;
    }
    throw "Invalid state";
  };

  /*intersection: (ray) ->
    si = @sphere.solutions(ray)
    pi = @plane.solutions(ray)
  
    # sphere intersection before plane intersection
    return null unless si && pi
  
    [si1, si2] = si
    [si1, si2] = [si2, si1] if si1 > si2
  
    [pi1, pi2] = pi
    [pi1, pi2] = [pi2, pi1] if pi1 > pi2
  
    # sphere intersection before plane intersection
    return null if si1 < pi1 && si2 < pi1
  
    # plane intersection before sphere intersection => sphere intersection
    if si1 > pi1 && si2 > pi1
      return @sphere.intersection(ray)
  
    # sphere intersection before plane intersection => plane intersection
    if si1 < pi1 && si2 > pi1
      return @plane.intersection(ray)
  
    throw "Invalid state"
  */


  Hemisphere.prototype.solutions = function(ray) {
    var i;
    i = this.intersection(ray);
    if (!i) {
      return null;
    }
    return [i.t1, i.t2];
  };

  return Hemisphere;

})();
